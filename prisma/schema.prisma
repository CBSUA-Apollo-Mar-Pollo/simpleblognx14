// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model User {
  id              String    @id @default(cuid())
  name            String?
  handleName      String?
  bio             String?
  email           String?   @unique
  emailVerified   DateTime?
  image           String?
  backgroundImage String?
  password        String?
  birthdate       DateTime?

  accounts         Account[]
  blogs            Blog[]
  Comment          Comment[]
  UserPostedImages UserPostedImages[]
}

model Blog {
  id          String   @id @default(cuid())
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  image       String?

  author   User   @relation(fields: [authorId], references: [id])
  authorId String

  sharedPostId String?

  comments Comment[]
}

model UserPostedImages {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  image     String?

  author   User      @relation(fields: [authorId], references: [id])
  authorId String
  comments Comment[]
}

model Comment {
  id   String @id @default(cuid())
  text String

  createdAt DateTime @default(now())

  author   User   @relation(fields: [authorId], references: [id])
  authorId String

  blog   Blog   @relation(fields: [postId], references: [id])
  postId String

  replyToId String?
  replyTo   Comment?  @relation("ReplyTo", fields: [replyToId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  replies   Comment[] @relation("ReplyTo")

  commentId String?

  UserPostedImages   UserPostedImages? @relation(fields: [userPostedImagesId], references: [id])
  userPostedImagesId String?
}

model verificationToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model passwordResetToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}
