// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["driverAdapters"]
}

// datasource db {
//   provider     = "mysql"
//   url          = env("DATABASE_URL")
//   relationMode = "prisma"
// }

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model User {
  id               String    @id @default(cuid())
  type             String    @default("user")
  name             String?
  handleName       String?
  bio              String?
  email            String?   @unique
  emailVerified    DateTime?
  image            String?
  backgroundImage  String?
  password         String?
  birthdate        DateTime?
  onlineStatus     Boolean   @default(false)
  lastStatusChange DateTime  @default(now())
  category         Json? // array of categories for page profile

  ownerId String?
  owner   User?   @relation("PageOwner", fields: [ownerId], references: [id])
  pages   User[]  @relation("PageOwner")

  additional           PageAdditionalInfo? @relation(fields: [additionalPageInfoId], references: [id])
  additionalPageInfoId String?

  accounts         Account[]
  blogs            Blog[]
  Comment          Comment[]
  UserPostedImages UserPostedImages[]
  Shortsv          Shortsv[]
  SearchHistory    SearchHistory[]

  UserBeingRequested Friend[] @relation("UserBeingRequested")
  FriendRequester    Friend[] @relation("FriendRequester")

  UserOne Conversation[] @relation("UserOne")
  UserTwo Conversation[] @relation("UserTwo")

  Message Message[]

  Notification Notification[]

  subscriptions Subscription[]

  createdSubreddits Community[]     @relation("CreatedBy")
  Vote              Vote[]
  CommentVote       CommentVote[]
  ShortsVidVote     ShortsVidVote[]
  Story             Story[]
  History           History[]

  ProfileAboutInfo ProfileAboutInfo[]
}

model Blog {
  id                  String   @id @default(cuid())
  description         String?
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt
  image               Json?
  video               Json?
  userStatus          String?
  textBackgroundStyle Json?

  author   User   @relation(fields: [authorId], references: [id])
  authorId String

  sharedPostId String?
  trashed      Boolean   @default(false)
  trashedAt    DateTime?

  comments    Comment[]
  RecentPosts RecentPosts[]
  community   Community?    @relation(fields: [communityId], references: [id], onDelete: Cascade)
  communityId String?
  votes       Vote[]
  History     History[]

  @@index([authorId])
  @@index([communityId])
}

model Shortsv {
  id          String   @id @default(cuid())
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  videoUrl    String

  author   User   @relation(fields: [authorId], references: [id])
  authorId String

  sharedVideoId String?
  videoStatus   String?

  community   Community? @relation(fields: [communityId], references: [id])
  communityId String?

  comments    Comment[]
  shortsVotes ShortsVidVote[]
}

model UserPostedImages {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  image     String?

  author   User      @relation(fields: [authorId], references: [id])
  authorId String
  comments Comment[]
}

model Comment {
  id   String  @id @default(cuid())
  text String?

  createdAt DateTime @default(now())

  author   User   @relation(fields: [authorId], references: [id])
  authorId String

  blog Blog @relation(fields: [postId], references: [id])

  postId String
  index  String?

  replyToId String?
  replyTo   Comment?  @relation("ReplyTo", fields: [replyToId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  replies   Comment[] @relation("ReplyTo")

  commentId       String?
  commentImageUrl String?

  Shortsv            Shortsv?          @relation(fields: [shortsvId], references: [id])
  shortsvId          String?
  UserPostedImages   UserPostedImages? @relation(fields: [userPostedImagesId], references: [id])
  userPostedImagesId String?
  CommentVote        CommentVote[]
}

model RecentPosts {
  id        String   @id @default(cuid())
  blog      Blog     @relation(fields: [postId], references: [id])
  postId    String
  createdAt DateTime @default(now())

  authorId String?
}

model verificationToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model passwordResetToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model SearchHistory {
  id   String @id @default(cuid())
  text String

  user   User   @relation(fields: [userId], references: [id])
  userId String

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
}

model searchData {
  id   String @id @default(cuid())
  text String
}

model Friend {
  id String @id @default(cuid())

  user              User     @relation("UserBeingRequested", fields: [userId], references: [id])
  userId            String
  requesterUser     User     @relation("FriendRequester", fields: [requesterUserId], references: [id])
  requesterUserId   String
  isRequestAccepted String   @default("false")
  createdAt         DateTime @default(now())
  updatedAt         DateTime @default(now())
}

model Notification {
  id String @id @default(cuid())

  userId String
  text   String

  fromUser   User   @relation(fields: [fromUserId], references: [id])
  fromUserId String

  isMarkAsRead String   @default("false")
  createdAt    DateTime @default(now())
}

model FriendRequestNotification {
  id              String   @id @default(cuid())
  userId          String
  requesterUserId String
  createdAt       DateTime @default(now())

  @@index([userId, requesterUserId], name: "unique_user_requester")
}

model Conversation {
  id String @id @default(cuid())

  userOneId String
  userOne   User   @relation("UserOne", fields: [userOneId], references: [id], onDelete: Cascade)

  userTwoId String
  userTwo   User   @relation("UserTwo", fields: [userTwoId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())

  Message Message[]

  @@unique([userOneId, userTwoId])
  @@index([userOneId])
  @@index([userTwoId])
}

model Message {
  id      String @id @default(cuid())
  content String @db.Text

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  conversationId String
  conversation   Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  deleted Boolean @default(false)

  @@index([userId])
  @@index([conversationId])
}

model Community {
  id          String  @id @default(cuid())
  name        String  @unique
  description String?

  banner String?
  icon   String?

  topics Json

  accessType String
  visibility String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  posts Blog[]

  Creator   User?   @relation("CreatedBy", fields: [creatorId], references: [id])
  creatorId String?

  members Subscription[]
  shortsv Shortsv[]

  @@index([name])
}

model Subscription {
  user        User      @relation(fields: [userId], references: [id])
  userId      String
  community   Community @relation(fields: [communityId], references: [id])
  communityId String

  @@id([userId, communityId])
}

enum VoteType {
  UP
  DOWN
}

model Vote {
  user   User     @relation(fields: [userId], references: [id])
  userId String
  post   Blog     @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId String
  type   VoteType

  @@id([userId, postId])
}

model ShortsVidVote {
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  shortsv   Shortsv  @relation(fields: [shortsvId], references: [id], onDelete: Cascade)
  shortsvId String // Make this nullable
  type      VoteType

  @@id([userId, shortsvId])
}

model CommentVote {
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  comment   Comment  @relation(fields: [commentId], references: [id])
  commentId String
  type      VoteType

  @@id([userId, commentId])
}

model Story {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  image     Json

  author   User   @relation(fields: [authorId], references: [id])
  authorId String

  @@index([authorId])
}

model History {
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  post   Blog   @relation(fields: [postId], references: [id])
  postId String

  user   User   @relation(fields: [userId], references: [id])
  userId String

  @@id([postId, userId])
}

// model Page {
//   id       String  @id @default(cuid())
//   name     String
//   category Json // array of categories
//   bio      String?

//   additional   PageAdditionalInfo? @relation(fields: [additionalId], references: [id])
//   additionalId String?

//   user   User   @relation(fields: [userId], references: [id])
//   userId String

//   createdAt DateTime @default(now())
//   updatedAt DateTime @updatedAt
// }

model PageAdditionalInfo {
  id String @id @default(cuid())

  website String?
  phone   String?
  email   String?

  location   Location? @relation(fields: [locationId], references: [id])
  locationId String?   @unique

  businessHours Json?

  photoUrl      String?
  coverPhotoUrl String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  User User[]
}

model Location {
  id      String  @id @default(cuid())
  address String?
  city    String?
  zipCode String?
  country String?

  pageAdditionalInfo PageAdditionalInfo?
}

model ProfileAboutInfo {
  id String @id @default(cuid())

  phonenumber    Json?
  relationstatus String?
  hometown       String?
  currentcity    String?
  college        Json?
  highschool     Json?

  user   User   @relation(fields: [userId], references: [id])
  userId String
}
